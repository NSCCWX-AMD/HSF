/**
* @file: 
* @author: Liu Hongbin
* @brief: 
* @date:   2019-10-14 09:17:17
* @last Modified by:   lenovo
* @last Modified time: 2019-11-13 00:43:55
*/
#ifndef REGION_HPP
#define REGION_HPP

#include "mpi.h"
#include "mesh.hpp"
#include "boundary.hpp"
#include "patch.hpp"
#include "field.hpp"

namespace HSF
{

class Region
{
private:
	char meshFile_[200];
	Mesh mesh_;
	Boundary boundary_;

	/// guhf
	Table<Word, Table<Word, Patch*>*>* patchTabPtr_;
	Table<Word, Table<Word, scalarField*>*>* scalarFieldTabPtr_;
	Table<Word, Table<Word, labelField*>*>* labelFieldTabPtr_;
	Word setType_;
public:
	Region()
	:
	patchTabPtr_(NULL),
	scalarFieldTabPtr_(NULL),
	labelFieldTabPtr_(NULL)
	{};
	~Region();
	Mesh& getMesh(){return this->mesh_;};
	Boundary& getBoundary(){return this->boundary_;};


	void initBeforeBalance(char* meshFile);
	void initAfterBalance();

	/**
	* @brief write mesh to CGNS file
	*/
	void write(char* meshFile, Label* field);
	/**
	* @brief write field to CGNS file
	*/
	void writeField(char* fieldName);

	/// guhf
    void createInterFaces
    (
        Array<Array<label> >& faceCells,
        label cellNum
    );

    /**
     * @brief      Gets the field.
     *
     * @param[in]  <unnamed>  { parameter_description }
     *
     * @return     The field.
     */
    // Field<scalar>& getField(Word);

    void initFields(Word fieldName);

    void updateFields(Word fieldName);

    /**
     * @brief      Gets the field from field table.
     * @param[in]  Word  field setType: face, node, ...
     * @param[in]  Word  field name
     * @tparam     T          label, scalar
     * @return     The field.
     */
    labelField& getLabelField(const Word, const Word);

    scalarField& getScalarField(const Word, const Word);

    /**
     * @brief      Adds a field to region.
     * @param[in]  Word  field setType: face, node, ...
     * @param[in]  Word  field name
     * @param      Field<T>*  field pointer
     * @tparam     T          label, scalar
     */
    void addLabelField(Word, Word, labelField*);

    void addScalarField(Word, Word, scalarField*);

    /**
     * @brief       delete a named field
     * @param[in]  Word  field setType: face, node, ...
     * @param[in]  Word  field name
     */
    void deleteField(Word, Word);
};

} // end namespace HSF

#endif
